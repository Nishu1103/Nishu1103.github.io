---
import { getCollection } from 'astro:content';
import BaseHead from '../../components/BaseHead.astro';
import Footer from '../../components/Footer.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import Header from '../../components/Header.astro';
import { SITE_DESCRIPTION, SITE_TITLE } from '../../consts';

const posts = (await getCollection('blog')).sort(
	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={`Blog - ${SITE_TITLE}`} description={SITE_DESCRIPTION} />
	</head>
	<body>
		<Header />
		<main>
			<div class="terminal-window">
				<div class="terminal-header">
					<div class="terminal-buttons">
						<span class="btn btn-red"></span>
						<span class="btn btn-yellow"></span>
						<span class="btn btn-green"></span>
					</div>
					<div class="terminal-title">blog/</div>
				</div>
				<div class="terminal-body">
					<div class="terminal-line">
						<span class="prompt">nishant@dev:~$</span>
						<span class="command">ls -la blog/</span>
					</div>
					<div class="terminal-output">
						<div class="blog-intro">
							<h1>üìù Blog Posts</h1>
							<p>Thoughts, tutorials, and insights from my development journey</p>
						</div>
					</div>

					<div class="terminal-line">
						<span class="prompt">nishant@dev:~$</span>
						<span class="command">cat blog-index.txt</span>
					</div>
					<div class="terminal-output">
						<div class="blog-posts">
							{
								posts.map((post, index) => (
									<div class="blog-post">
										<div class="post-header">
											<span class="post-number">{String(index + 1).padStart(2, '0')}</span>
											<span class="post-title">{post.data.title}</span>
											<span class="post-date">
												<FormattedDate date={post.data.pubDate} />
											</span>
										</div>
										<div class="post-description">
											{post.data.description}
										</div>
										<div class="post-tags">
											{post.data.tags && post.data.tags.map((tag) => (
												<span class="tag">#{tag}</span>
											))}
										</div>
										<div class="post-link">
											<a href={`/blog/${post.id}/`} class="read-more">
												‚Üí Read More
											</a>
										</div>
									</div>
								))
							}
						</div>
					</div>

					<div class="terminal-line">
						<span class="prompt">nishant@dev:~$</span>
						<span class="cursor">‚ñà</span>
					</div>
				</div>
			</div>
		</main>
		<Footer />
	</body>
</html>

<style>
	.terminal-output {
		margin-left: 0;
		margin-bottom: 1rem;
		color: var(--terminal-text);
	}

	.blog-intro {
		text-align: center;
		margin: 2rem 0;
	}

	.blog-intro h1 {
		color: var(--terminal-accent);
		font-size: 2rem;
		margin: 0 0 0.5rem 0;
		font-weight: 700;
	}

	.blog-intro p {
		color: var(--terminal-text-muted);
		font-size: 1rem;
		margin: 0;
	}

	.blog-posts {
		margin: 1rem 0;
	}

	.blog-post {
		background: var(--terminal-bg);
		border-radius: 6px;
		border-left: 4px solid var(--terminal-accent);
		padding: 1.5rem;
		margin-bottom: 1.5rem;
		transition: all 0.3s ease;
		border: 1px solid var(--terminal-border);
	}

	.blog-post:hover {
		border-left-color: var(--terminal-blue);
		transform: translateX(4px);
	}

	.post-header {
		display: flex;
		align-items: center;
		gap: 1rem;
		margin-bottom: 0.75rem;
		flex-wrap: wrap;
	}

	.post-number {
		color: var(--terminal-accent);
		font-weight: 700;
		font-size: 0.9rem;
		background: var(--terminal-surface);
		padding: 0.25rem 0.5rem;
		border-radius: 4px;
		min-width: 30px;
		text-align: center;
	}

	.post-title {
		color: var(--terminal-text);
		font-weight: 600;
		font-size: 1.1rem;
		flex: 1;
	}

	.post-date {
		color: var(--terminal-text-muted);
		font-size: 0.85rem;
		background: var(--terminal-surface);
		padding: 0.25rem 0.5rem;
		border-radius: 4px;
	}

	.post-description {
		color: var(--terminal-text);
		margin-bottom: 1rem;
		line-height: 1.5;
	}

	.post-tags {
		display: flex;
		flex-wrap: wrap;
		gap: 0.5rem;
		margin-bottom: 1rem;
	}

	.tag {
		color: var(--terminal-blue);
		font-size: 0.8rem;
		background: var(--terminal-surface);
		padding: 0.2rem 0.5rem;
		border-radius: 12px;
		border: 1px solid var(--terminal-border);
	}

	.post-link {
		text-align: right;
	}

	.read-more {
		color: var(--terminal-blue);
		text-decoration: none;
		font-weight: 500;
		font-size: 0.9rem;
		padding: 0.5rem 1rem;
		border: 1px solid var(--terminal-border);
		border-radius: 4px;
		background: var(--terminal-surface);
		transition: all 0.2s ease;
		display: inline-block;
	}

	.read-more:hover {
		background: var(--terminal-surface-alt);
		border-color: var(--terminal-blue);
		color: var(--terminal-blue-light);
		transform: translateX(2px);
	}


	@media (max-width: 768px) {
		.terminal-body {
			padding: 1rem;
			font-size: 0.85rem;
		}

		.blog-intro h1 {
			font-size: 1.5rem;
		}

		.post-header {
			flex-direction: column;
			align-items: flex-start;
			gap: 0.5rem;
		}

		.post-title {
			font-size: 1rem;
		}

		.blog-post {
			padding: 1rem;
		}

		.post-tags {
			gap: 0.25rem;
		}

		.tag {
			font-size: 0.75rem;
		}
	}
</style>